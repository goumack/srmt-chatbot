#!/usr/bin/env python3
"""
Questions de test pour valider l'extraction des tableaux budg√©taires
"""

import requests
import json
import time

def test_questions_tableaux():
    """Questions sp√©cifiques pour tester l'extraction de tableaux"""
    
    print("üß™ QUESTIONS DE TEST - Tableaux Budg√©taires")
    print("=" * 60)
    
    # Questions cibl√©es pour tester les capacit√©s d'extraction
    questions_test = [
        {
            "id": 1,
            "question": "Quels sont les programmes du minist√®re de l'√©ducation nationale avec leurs codes dans le tableau budg√©taire ?",
            "objectif": "Tester extraction colonnes CODE_PROGRAMME et LIBELLE_PROGRAMME",
            "attendu": "Structure COLONNES/LIGNES avec codes sp√©cifiques"
        },
        {
            "id": 2,
            "question": "Affiche-moi le tableau des allocations par minist√®re avec les montants AE et CP pour 2021",
            "objectif": "Tester extraction donn√©es financi√®res structur√©es",
            "attendu": "Montants en milliards FCFA avec structure tabulaire"
        },
        {
            "id": 3,
            "question": "Dans le document budg√©taire, montre-moi les lignes du tableau qui concernent le minist√®re du travail",
            "objectif": "Tester filtrage intelligent des lignes minist√©rielles",
            "attendu": "Lignes sp√©cifiques avec 'minist√®re du travail'"
        },
        {
            "id": 4,
            "question": "Peux-tu extraire les sections et titres budg√©taires pour tous les minist√®res du tableau page 39 ?",
            "objectif": "Tester extraction compl√®te structure hi√©rarchique",
            "attendu": "SECTION, TITRE organis√©s par minist√®re"
        },
        {
            "id": 5,
            "question": "Compare les allocations budg√©taires entre le minist√®re de l'√©ducation et celui de la sant√© selon les tableaux",
            "objectif": "Tester analyse comparative des donn√©es tabulaires",
            "attendu": "Comparaison chiffr√©e avec structure claire"
        }
    ]
    
    base_url = "http://127.0.0.1:8505"
    
    # Tester la connexion d'abord
    try:
        response = requests.get(base_url, timeout=5)
        print(f"‚úÖ Serveur accessible: {response.status_code}")
    except:
        print("‚ùå Serveur non accessible - Lancez d'abord: python 'boutton memoire nouveau .py'")
        return
    
    # Tester chaque question
    for q in questions_test:
        print(f"\nüìã TEST {q['id']}/5: {q['question'][:60]}...")
        print(f"üéØ Objectif: {q['objectif']}")
        print(f"üìä Attendu: {q['attendu']}")
        
        try:
            response = requests.post(
                f"{base_url}/chat",
                json={"question": q["question"]},
                timeout=120
            )
            
            if response.status_code == 200:
                data = response.json()
                reponse = data.get('response', '')
                references = data.get('references', [])
                
                print(f"‚úÖ R√©ponse re√ßue: {len(reponse)} caract√®res")
                
                # Analyse sp√©cifique aux tableaux
                criteres_tableaux = {
                    'Structure COLONNES': 'colonnes:' in reponse.lower(),
                    'Structure LIGNES': 'ligne:' in reponse.lower() or 'lignes:' in reponse.lower(),
                    'Donn√©es minist√®res': any(mot in reponse.lower() for mot in ['minist√®re', 'ministere', '√©ducation', 'sant√©', 'travail']),
                    'Codes/Programmes': any(mot in reponse.lower() for mot in ['programme', 'code', 'section']),
                    'Montants financiers': any(mot in reponse.lower() for mot in ['milliards', 'fcfa', 'ae', 'cp', 'budget']),
                    'Tableau d√©tect√©': 'tableau' in reponse.lower(),
                    'R√©f√©rences valides': len(references) > 0
                }
                
                score = sum(criteres_tableaux.values())
                print(f"üìä Score tableau: {score}/7")
                
                for critere, present in criteres_tableaux.items():
                    status = "‚úÖ" if present else "‚ùå"
                    print(f"  {status} {critere}")
                
                # Afficher extrait pertinent
                if len(reponse) > 300:
                    extrait = reponse[:300] + "..."
                else:
                    extrait = reponse
                print(f"üìù Extrait: {extrait}")
                
                # √âvaluation sp√©cifique
                if score >= 5:
                    print("üéâ EXCELLENT - Extraction de tableau r√©ussie")
                elif score >= 3:
                    print("‚úÖ BON - Donn√©es partiellement structur√©es")
                else:
                    print("‚ö†Ô∏è  LIMIT√â - Am√©lioration n√©cessaire")
                    
            else:
                print(f"‚ùå Erreur HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        # Pause entre tests
        if q['id'] < len(questions_test):
            print("‚è≥ Pause 15 secondes...")
            time.sleep(15)
    
    print("\nüèÜ TESTS TERMIN√âS")
    print("‚úÖ Validez que le syst√®me peut extraire:")
    print("  ‚Ä¢ Structure COLONNES/LIGNES des tableaux")
    print("  ‚Ä¢ Donn√©es minist√©rielles sp√©cifiques")
    print("  ‚Ä¢ Codes programmes et sections")
    print("  ‚Ä¢ Montants budg√©taires (AE/CP)")

if __name__ == "__main__":
    test_questions_tableaux()